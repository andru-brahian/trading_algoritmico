#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
oly(Volume_AAPL, degree = 7) especifica la variable independiente y su transformación. En este caso, Volume_AAPL se está transformando en una variable polinómica de septimo grado. Esto significa que, en lugar de usar Volume_AAPL directamente, se está utilizando Volume_AAPL elevado a la tercera potencia como variable independiente. Esta transformación permite modelar relaciones no lineales entre las variables.
#poly(Volume_AAPL, degree = 7) especifica la variable independiente y su transformación. En este caso, Volume_AAPL se está transformando en una variable polinómica de septimo grado. Esto significa que, en lugar de usar Volume_AAPL directamente, se está utilizando Volume_AAPL elevado a la tercera potencia como variable independiente. Esta transformación permite modelar relaciones no lineales entre las variables.
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 13), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
plot(Close_AAPL ~ Volume_AAPL, data=base_datos)
with(volume_range, points(x= base_datos$Volume_AAPL, y=predicciones, col='red'))
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 10), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 8), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 9), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
#poly(Volume_AAPL, degree = 7) especifica la variable independiente y su transformación. En este caso, Volume_AAPL se está transformando en una variable polinómica de septimo grado. Esto significa que, en lugar de usar Volume_AAPL directamente, se está utilizando Volume_AAPL elevado a la tercera potencia como variable independiente. Esta transformación permite modelar relaciones no lineales entre las variables.
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 6), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
#regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 20), data = base_datos)
regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 8), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
#SI AUMENTO MÁS EL GRADO A MAYORES DE 8, SE PRODUCE SOBRE AJUSTE, LO QUE HACE QUE LA PREDICCIÓN REACCIONE DE FORMA DEMASIADO SENSIBLE Y ARROJA VALORES EXORBITANTEMENTE IRREALES
regresion_polinomica <- lm(Close_AAPL ~ poly(Volume_AAPL, degree = 8), data = base_datos)
#regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 8), data = base_datos)
# Calcular el número de valores únicos en la variable Volume_AAPL
#num_valores_unicos <- length(unique(base_datos$Volume_AAPL))
#num_valores_unicos
# otra forma: regresion_polinomica = lm(Close_AAPL ~ poly(Volume_AAPL, 7), data = base_datos)
#Si aplicas poly(Volume_AAPL, 2), obtendrás una matriz de diseño polinómica de segundo grado para Volume_AAPL. La matriz resultante se vería así:
#volume  volume^2
#1   1
#2   4
#3   9
# Luego, el modelo de regresión lineal se ajusta a los datos de Close_AAPL en función de esta matriz de diseño polinómica. El resultado es una regresión polinómica de segundo grado que puede expresarse como:
# Close_AAPL = a + b1 * Volume_AAPL + b2 * (Volume_AAPL^2)
# Creación de un rango de valores de Volume_AAPL para la predicción (los valores solo son para ubicar Close_AAPL en la gráfica, no son los valores originales de Volume_AAPL)
# length.out = nrow(base_datos) para que la longitud o cantidad de valores creada sea igual a la longitud de filas de la base de datos
volume_range <- seq(min(base_datos$Volume_AAPL), max(base_datos$Volume_AAPL), length.out = nrow(base_datos))
length(volume_range)
# Predicciones del modelo polinómico
#predictions <- predict(poly_reg, newdata = data.frame(Volume_AAPL = volume_range))
predicciones <- predict(regresion_polinomica, newdata = data.frame(Volume_AAPL = volume_range))
#DESCARGAR IMÁGEN
# Creación del gráfico, modelo polinómico
mi_grafico <- ggplot(base_datos, aes(x = Volume_AAPL, y = Close_AAPL)) +
geom_point(color = "red") +
geom_line(aes(x = volume_range, y = predicciones), color = "blue") +
ggtitle("Predicción polinómica precio de cierre de AAPL en función del volumen") +
xlab("Volumen AAPL") +
ylab("Close AAPL") +
theme_minimal()
# Especifica la ruta completa donde deseas guardar el archivo .png
ruta_guardado <- "C:/Users/USUARIO/Documents/1 univalle/0 1 VIU/2_MODULO_2/6MBDI, ESTADISTICA AVANZADA/ACTIVIDAD 1/MINERIA_DE_DATOS/mi_grafico.png"
# Utiliza ggsave para guardar el gráfico en la ubicación especificada
ggsave(filename = ruta_guardado, plot = mi_grafico, device = "png", bg= "white")
mi_grafico
# ACTIVIDAD 1
url <- "https://raw.githubusercontent.com/andru-brahian/trading_algoritmico/main/usados_regresion.csv"
#url <- "https://raw.githubusercontent.com/andru-brahian/trading_algoritmico/main/df_caja.csv"
# Carga de paquetes necesarios
library(ggplot2)
# Carga del conjunto de datos desde el archivo CSV (ajusta la ruta según tu ubicación)
base_datos <- read.csv((url), sep = ";")
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float)
base_datos$Close_AAPL <- as.numeric(gsub(",", ".", base_datos$Close_AAPL))
base_datos$Volume_AAPL <- as.numeric(gsub(",", ".", base_datos$Volume_AAPL))
# trabajar con la columna Close_AAPL como valores float
is.numeric(base_datos$Close_AAPL)
is.numeric(base_datos$Volume_AAPL)
#NA
anyNA(base_datos$Close_AAPL)
anyNA(base_datos$Volume_AAPL)
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float) para Close_COIN
base_datos$Close_COIN <- as.numeric(gsub(",", ".", base_datos$Close_COIN))
base_datos$Volume_COIN <- as.numeric(gsub(",", ".", base_datos$Volume_COIN))
# Trabajar con la columna Close_COIN como valores float
is.numeric(base_datos$Close_COIN)
is.numeric(base_datos$Volume_COIN)
# Verificar si hay valores NA en Close_COIN y Volume_COIN
anyNA(base_datos$Close_COIN)
anyNA(base_datos$Volume_COIN)
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float) para Close_GEHC
base_datos$Close_GEHC <- as.numeric(gsub(",", ".", base_datos$Close_GEHC))
base_datos$Volume_GEHC <- as.numeric(gsub(",", ".", base_datos$Volume_GEHC))
# Trabajar con la columna Close_GEHC como valores float
is.numeric(base_datos$Close_GEHC)
is.numeric(base_datos$Volume_GEHC)
# Verificar si hay valores NA en Close_GEHC y Volume_GEHC
anyNA(base_datos$Close_GEHC)
anyNA(base_datos$Volume_GEHC)
# ACTIVIDAD 1
url <- "https://raw.githubusercontent.com/andru-brahian/trading_algoritmico/main/usados_regresion.csv"
#url <- "https://raw.githubusercontent.com/andru-brahian/trading_algoritmico/main/df_caja.csv"
# Carga de paquetes necesarios
library(ggplot2)
# Carga del conjunto de datos desde el archivo CSV (ajusta la ruta según tu ubicación)
base_datos <- read.csv((url), sep = ";")
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float)
base_datos$Close_AAPL <- as.numeric(gsub(",", ".", base_datos$Close_AAPL))
base_datos$Volume_AAPL <- as.numeric(gsub(",", ".", base_datos$Volume_AAPL))
# trabajar con la columna Close_AAPL como valores float
is.numeric(base_datos$Close_AAPL)
is.numeric(base_datos$Volume_AAPL)
#NA
anyNA(base_datos$Close_AAPL)
anyNA(base_datos$Volume_AAPL)
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float) para Close_COIN
base_datos$Close_COIN <- as.numeric(gsub(",", ".", base_datos$Close_COIN))
base_datos$Volume_COIN <- as.numeric(gsub(",", ".", base_datos$Volume_COIN))
# Trabajar con la columna Close_COIN como valores float
is.numeric(base_datos$Close_COIN)
is.numeric(base_datos$Volume_COIN)
# Verificar si hay valores NA en Close_COIN y Volume_COIN
anyNA(base_datos$Close_COIN)
anyNA(base_datos$Volume_COIN)
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float) para Close_GEHC
base_datos$Close_GEHC <- as.numeric(gsub(",", ".", base_datos$Close_GEHC))
base_datos$Volume_GEHC <- as.numeric(gsub(",", ".", base_datos$Volume_GEHC))
# Trabajar con la columna Close_GEHC como valores float
is.numeric(base_datos$Close_GEHC)
is.numeric(base_datos$Volume_GEHC)
# Verificar si hay valores NA en Close_GEHC y Volume_GEHC
anyNA(base_datos$Close_GEHC)
anyNA(base_datos$Volume_GEHC)
# Cargar las bibliotecas necesarias
library(dplyr)
# ACTIVIDAD 1
url <- "https://raw.githubusercontent.com/andru-brahian/trading_algoritmico/main/usados_regresion.csv"
#url <- "https://raw.githubusercontent.com/andru-brahian/trading_algoritmico/main/df_caja.csv"
# Carga de paquetes necesarios
library(ggplot2)
# Carga del conjunto de datos desde el archivo CSV (ajusta la ruta según tu ubicación)
base_datos <- read.csv((url), sep = ";")
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float)
base_datos$Close_AAPL <- as.numeric(gsub(",", ".", base_datos$Close_AAPL))
base_datos$Volume_AAPL <- as.numeric(gsub(",", ".", base_datos$Volume_AAPL))
# trabajar con la columna Close_AAPL como valores float
is.numeric(base_datos$Close_AAPL)
is.numeric(base_datos$Volume_AAPL)
#NA
anyNA(base_datos$Close_AAPL)
anyNA(base_datos$Volume_AAPL)
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float) para Close_COIN
base_datos$Close_COIN <- as.numeric(gsub(",", ".", base_datos$Close_COIN))
base_datos$Volume_COIN <- as.numeric(gsub(",", ".", base_datos$Volume_COIN))
# Trabajar con la columna Close_COIN como valores float
is.numeric(base_datos$Close_COIN)
is.numeric(base_datos$Volume_COIN)
# Verificar si hay valores NA en Close_COIN y Volume_COIN
anyNA(base_datos$Close_COIN)
anyNA(base_datos$Volume_COIN)
# Reemplazar las comas por puntos y convertir a numeric (equivalente a float) para Close_GEHC
base_datos$Close_GEHC <- as.numeric(gsub(",", ".", base_datos$Close_GEHC))
base_datos$Volume_GEHC <- as.numeric(gsub(",", ".", base_datos$Volume_GEHC))
# Trabajar con la columna Close_GEHC como valores float
is.numeric(base_datos$Close_GEHC)
is.numeric(base_datos$Volume_GEHC)
# Verificar si hay valores NA en Close_GEHC y Volume_GEHC
anyNA(base_datos$Close_GEHC)
anyNA(base_datos$Volume_GEHC)
# Cargar las bibliotecas necesarias
install.packages("dplyr")
library(dplyr)
# Asegurarse de que la base de datos esté ordenada por fecha (si aún no lo está)
base_datos <- base_datos %>% arrange(Fecha)
# Asegurarse de que la base de datos esté ordenada por fecha (si aún no lo está)
base_datos <- base_datos %>% arrange(Date)
# Asegurarse de que la base de datos esté ordenada por fecha (si aún no lo está)
base_datos <- base_datos %>% arrange(new_date)
# Calcular los rendimientos diarios para cada acción
base_datos <- base_datos %>%
mutate(
Rendimiento_AAPL = (Close_AAPL - lag(Close_AAPL)) / lag(Close_AAPL),
Rendimiento_COIN = (Close_COIN - lag(Close_COIN)) / lag(Close_COIN),
Rendimiento_GEHC = (Close_GEHC - lag(Close_GEHC)) / lag(Close_GEHC)
)
# Definir los pesos del portafolio (ajusta los pesos según tus preferencias)
pesos <- c(0.4, 0.3, 0.3)  # Por ejemplo, 40% en Close_AAPL, 30% en Close_COIN y 30% en Close_GEHC
# Calcular el rendimiento diario del portafolio
base_datos$Rendimiento_Portafolio <- rowSums(base_datos[, c("Rendimiento_AAPL", "Rendimiento_COIN", "Rendimiento_GEHC")] * pesos)
# Ajustar un modelo de regresión múltiple
modelo <- lm(Rendimiento_Portafolio ~ Rendimiento_AAPL + Rendimiento_COIN + Rendimiento_GEHC, data = base_datos)
# Ver un resumen del modelo
summary(modelo)
# Cargar la biblioteca necesaria
library(ggplot2)
# Gráfica de los rendimientos diarios
ggplot(base_datos, aes(x = Date)) +
geom_line(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 1) +
geom_line(aes(y = Rendimiento_COIN, color = "COIN"), size = 1) +
geom_line(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 1) +
geom_line(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 1) +
labs(title = "Rendimientos Diarios de Acciones y Portafolio",
x = "Fecha",
y = "Rendimiento") +
scale_color_manual(values = c("AAPL" = "blue", "COIN" = "red", "GEHC" = "green", "Portafolio" = "purple")) +
theme_minimal()
# Cargar la biblioteca necesaria
library(ggplot2)
# Gráfica de los rendimientos diarios
ggplot(base_datos, aes(x = new_date)) +
geom_line(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 1) +
geom_line(aes(y = Rendimiento_COIN, color = "COIN"), size = 1) +
geom_line(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 1) +
geom_line(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 1) +
labs(title = "Rendimientos Diarios de Acciones y Portafolio",
x = "Fecha",
y = "Rendimiento") +
scale_color_manual(values = c("AAPL" = "blue", "COIN" = "red", "GEHC" = "green", "Portafolio" = "purple")) +
theme_minimal()
# Gráfica de los rendimientos diarios en puntos
ggplot(base_datos, aes(x = Date)) +
geom_point(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 2) +
geom_point(aes(y = Rendimiento_COIN, color = "COIN"), size = 2) +
geom_point(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 2) +
geom_point(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 2) +
labs(title = "Rendimientos Diarios de Acciones y Portafolio",
x = "Fecha",
y = "Rendimiento") +
scale_color_manual(values = c("AAPL" = "blue", "COIN" = "red", "GEHC" = "green", "Portafolio" = "purple")) +
theme_minimal()
# Gráfica de los rendimientos diarios en puntos
ggplot(base_datos, aes(x = new_date)) +
geom_point(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 2) +
geom_point(aes(y = Rendimiento_COIN, color = "COIN"), size = 2) +
geom_point(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 2) +
geom_point(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 2) +
labs(title = "Rendimientos Diarios de Acciones y Portafolio",
x = "Fecha",
y = "Rendimiento") +
scale_color_manual(values = c("AAPL" = "blue", "COIN" = "red", "GEHC" = "green", "Portafolio" = "purple")) +
theme_minimal()
# Gráfica de los rendimientos diarios en líneas y puntos
ggplot(base_datos, aes(x = Date)) +
geom_line(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 1) +
geom_line(aes(y = Rendimiento_COIN, color = "COIN"), size = 1) +
geom_line(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 1) +
geom_line(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 1) +
geom_point(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 2) +
geom_point(aes(y = Rendimiento_COIN, color = "COIN"), size = 2) +
geom_point(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 2) +
geom_point(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 2) +
labs(title = "Rendimientos Diarios de Acciones y Portafolio",
x = "Fecha",
y = "Rendimiento") +
scale_color_manual(values = c("AAPL" = "blue", "COIN" = "red", "GEHC" = "green", "Portafolio" = "purple")) +
theme_minimal()
# Gráfica de los rendimientos diarios en líneas y puntos
ggplot(base_datos, aes(x = new_date)) +
geom_line(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 1) +
geom_line(aes(y = Rendimiento_COIN, color = "COIN"), size = 1) +
geom_line(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 1) +
geom_line(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 1) +
geom_point(aes(y = Rendimiento_AAPL, color = "AAPL"), size = 2) +
geom_point(aes(y = Rendimiento_COIN, color = "COIN"), size = 2) +
geom_point(aes(y = Rendimiento_GEHC, color = "GEHC"), size = 2) +
geom_point(aes(y = Rendimiento_Portafolio, color = "Portafolio"), size = 2) +
labs(title = "Rendimientos Diarios de Acciones y Portafolio",
x = "Fecha",
y = "Rendimiento") +
scale_color_manual(values = c("AAPL" = "blue", "COIN" = "red", "GEHC" = "green", "Portafolio" = "purple")) +
theme_minimal()
